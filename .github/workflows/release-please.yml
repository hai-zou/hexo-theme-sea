name: Release and Publish

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  release:
    if: ${{ github.event.pull_request.merged == true }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      - name: Determine version bump
        id: determine_version
        run: |
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          echo "Last commit message: $LAST_COMMIT_MSG"
          if [[ "$LAST_COMMIT_MSG" =~ ^fix(\([^\)]+\))?: ]]; then
            echo "bump=patch" >> $GITHUB_OUTPUT
            echo "commit_msg=$LAST_COMMIT_MSG" >> $GITHUB_OUTPUT
          elif [[ "$LAST_COMMIT_MSG" =~ ^feat(\([^\)]+\))?: ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
            echo "commit_msg=$LAST_COMMIT_MSG" >> $GITHUB_OUTPUT
          elif [[ "$LAST_COMMIT_MSG" =~ ^refactor(\([^\)]+\))?: ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
            echo "commit_msg=$LAST_COMMIT_MSG" >> $GITHUB_OUTPUT
          else
            echo "No version bump needed"
            echo "bump=none" >> $GITHUB_OUTPUT
          fi

      - name: Set Git Config
        if: ${{ steps.determine_version.outputs.bump != 'none' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

      - name: Bump version and create changelog
        id: bump_version
        if: ${{ steps.determine_version.outputs.bump != 'none' }}
        run: |
          BUMP_TYPE=${{ steps.determine_version.outputs.bump }}
          NEW_VERSION=$(npm version $BUMP_TYPE -m "chore(release): %s" | tail -1)
          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push changes
        if: ${{ steps.determine_version.outputs.bump != 'none' }}
        run: |
          git push --follow-tags origin main

      - name: Publish to npm
        if: ${{ steps.determine_version.outputs.bump != 'none' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish

      - name: Create or update GitHub Release
        if: ${{ steps.determine_version.outputs.bump != 'none' && steps.bump_version.outputs.new_version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION=${{ steps.bump_version.outputs.new_version }}
          LAST_COMMIT_MSG="${{ steps.determine_version.outputs.commit_msg }}"
          RELEASE_DATA=$(jq -n --arg tag "$NEW_VERSION" --arg name "$NEW_VERSION" --arg body "$LAST_COMMIT_MSG" '{ tag_name: $tag, name: $name, body: $body, draft: false, prerelease: false }')
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
               -H "Content-Type: application/json" \
               -d "$RELEASE_DATA" \
               "https://api.github.com/repos/${{ github.repository }}/releases"
